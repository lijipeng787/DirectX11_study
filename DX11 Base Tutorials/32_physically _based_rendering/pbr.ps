Texture2D diffuseTexture : register(t0);
Texture2D normalMap : register(t1);
Texture2D rmTexture : register(t2);
SamplerState SampleType : register(s0);

cbuffer LightBuffer
{
    float3 lightDirection;
	float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 PbrPixelShader(PixelInputType input) : SV_TARGET
{	
	float3 lightDir;
	float3 albedo, rmColor, bumpMap;
	float3 bumpNormal;
	float roughness, metallic;
	float3 F0;
	float3 halfDirection;
	float NdotH, NdotV, NdotL, HdotV;
	float roughnessSqr, roughSqr2, NdotHSqr, denominator, normalDistribution;
	float smithL, smithV, geometricShadow;
	float3 fresnel;
	float3 specularity;
	float4 color;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

	// Sample the textures.
    albedo = diffuseTexture.Sample(SampleType, input.tex).rgb;
	rmColor = rmTexture.Sample(SampleType, input.tex).rgb;
    bumpMap = normalMap.Sample(SampleType, input.tex).rgb;

	// Calculate the normal using the normal map.
	bumpMap = (bumpMap * 2.0f) - 1.0f;
    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
    bumpNormal = normalize(bumpNormal);

	// Get the metalic and roughness from the roughness/metalness texture.
	roughness = rmColor.r;
	metallic = rmColor.b;
	
	// Surface reflection at zero degress. Combine with albedo based on metal. Needed for fresnel calculation.
	F0 = float3(0.04f, 0.04f, 0.04f);
	F0 = lerp(F0, albedo, metallic);

	// Setup the vectors needed for lighting calculations.
	halfDirection = normalize(input.viewDirection + lightDir); 
	NdotH = max(0.0f, dot(bumpNormal, halfDirection));
	NdotV = max(0.0f, dot(bumpNormal, input.viewDirection));
	NdotL = max(0.0f, dot(bumpNormal, lightDir));
	HdotV = max(0.0f, dot(halfDirection, input.viewDirection));

	// GGX normal distribution calculation.
	roughnessSqr = roughness * roughness;
	roughSqr2 = roughnessSqr * roughnessSqr;
	NdotHSqr = NdotH * NdotH;
	denominator = (NdotHSqr * (roughSqr2 - 1.0f) + 1.0f);
	denominator = 3.14159265359f * (denominator * denominator);
	normalDistribution = roughSqr2 / denominator;

	// Schlick geometric shadow calculation.
	smithL = NdotL / (NdotL * (1.0f - roughnessSqr) + roughnessSqr);
	smithV = NdotV / (NdotV * (1.0f - roughnessSqr) + roughnessSqr);
	geometricShadow = smithL * smithV;

	// Fresnel shlick approximation for fresnel term calculation.
	fresnel = F0 + (1.0f - F0) * pow(1.0f - HdotV, 5.0f);

	// Now calculate the bidirectional reflectance distribution function.
	specularity = (normalDistribution * fresnel * geometricShadow) / ((4.0f * (NdotL * NdotV)) + 0.00001f);

	// Final light equation.
	color.rgb = albedo + specularity;
	color.rgb = color.rgb * NdotL;

	// Set the alpha to 1.0f.
	color = float4(color.rgb, 1.0f);

    return color;
}